// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
)

const getMaster = `-- name: GetMaster :one
SELECT product, product_desc, baseunit, validitystartdate, productgroup, division, grossweight, weightunit, sizeordimensiontext, productstandardid FROM ` + "`" + `example_product_master_basic_data` + "`" + `
WHERE Product = $1
`

func (q *Queries) GetMaster(ctx context.Context) (ExampleProductMasterBasicData, error) {
	row := q.db.QueryRowContext(ctx, getMaster)
	var i ExampleProductMasterBasicData
	err := row.Scan(
		&i.Product,
		&i.ProductDesc,
		&i.Baseunit,
		&i.Validitystartdate,
		&i.Productgroup,
		&i.Division,
		&i.Grossweight,
		&i.Weightunit,
		&i.Sizeordimensiontext,
		&i.Productstandardid,
	)
	return i, err
}

const insertMaster = `-- name: InsertMaster :exec
INSERT INTO example_product_master_basic_data (Product) VALUES ($1)
`

func (q *Queries) InsertMaster(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, insertMaster)
	return err
}

const listMaster = `-- name: ListMaster :many
SELECT product, product_desc, baseunit, validitystartdate, productgroup, division, grossweight, weightunit, sizeordimensiontext, productstandardid FROM ` + "`" + `example_product_master_basic_data` + "`" + `
`

func (q *Queries) ListMaster(ctx context.Context) ([]ExampleProductMasterBasicData, error) {
	rows, err := q.db.QueryContext(ctx, listMaster)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExampleProductMasterBasicData{}
	for rows.Next() {
		var i ExampleProductMasterBasicData
		if err := rows.Scan(
			&i.Product,
			&i.ProductDesc,
			&i.Baseunit,
			&i.Validitystartdate,
			&i.Productgroup,
			&i.Division,
			&i.Grossweight,
			&i.Weightunit,
			&i.Sizeordimensiontext,
			&i.Productstandardid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
